
【修改浮动按钮背景/图片颜色】
GVS（4，FAB）
java的（图标颜色，空， “android.graphics.Color.parseColor”， “串”， “＃009688”）
爪哇（背景颜色，空， “android.graphics.Color.parseColor”， “串”， “＃00FF00”）

java（null，fab，“android.widget.ImageView.setColorFilter”，“int”，图标颜色）
的java（背景颜色，NULL， “android.content.res.ColorStateList.valueOf”， “INT”，背景颜色）
java（null，fab，“android.support.design.widget.FloatingActionButton.setBackgroundTintList”，“android.content.res.ColorStateList”，背景颜色）

【BASE64加解密】

//的Base64编码：
原文=“残页”
的java（字节数组，原文， “java.lang.String.getBytes”）
//转成字节[]字节数组
的java（密文，NULL， “android.util.Base64.encodeToString”， “字节[]”，字节数组， “INT”，0）
//的Base64编码，0是模式
//如果失败请更改模式
/。
模式列表：
默认值= 0
NO_PADDING = 1
NO_WRAP = 2
CRLF = 4
URL_SAFE = 8
./
TW（密文）

// BASE64解码：
s密文=“5q6L6aG1”
的java（字节数组，NULL， “android.util.Base64.decode”， “字符串”，密文， “INT”，0）
// Base64的解码，0是模式
//如果失败请更改模式
javanew（原文 “java.lang.String中”， “字节[]”，字节数组）
//由于返回的是字节[]字节数组，所以转化成字符串
TW（原文）

//作者：残页


【耳机是否插入】
的java（音频管理器，活动， “android.content.Context.getSystemService”， “字符串”， “音频”）
的java（WH，音频管理器 “android.media.AudioManager.isWiredHeadsetOn”）
SS（ “耳机插入状态为：” + WH，所以）
TW（左右）

【获取当前应用悬浮窗权限】
爪哇（哎呀，空， “android.provider.Settings.canDrawOverlays”， “android.content.Context”，活动）
TW（OPPS）

【跳转悬浮窗设置界面】
坐（a，“action”，“android.intent.action.VIEW”）
sit（a，“action”，“android.settings.action.MANAGE_OVERLAY_PERMISSION”）
CLS（ “android.content.ContextWrapper” 类）
的javax（一个，活性，类， “getPackageName”）
SS（ “包：” +之一，PK）
坐（a，“data”，pk）
uit（a，“chooser”，“设置悬浮窗权限”）

【自定义TWS背景等】

//需要一个容器
GVS（1，视图）
CLS（ “android.support.design.widget.Snackbar” 类）
//文本传入和时间
的javax（SNK，NULL，类 “使”， “android.view.View” 视图， “java.lang.CharSequence中”， “Snkbar，后面数单位是毫秒”， “INT”，3000）
cls（“android.view.View $ OnClickListener”，事件类）
javacb（事件，事件类）
{
s qun = 123456789
SS（ “mqqapi：//卡/ show_pslcard src_type =内部＆版本= 1＆UIN =” +群+ “＆CARD_TYPE =基团源= QRCode的”，joinqq）
坐（a，“action”，“android.intent.action.VIEW”）
坐（一， “数据”，joinqq）
uit（a，“chooser”，“选择QQ”）
}
//按钮的文字
的javax（NULL，SNK，类 “的setAction”， “java.lang.CharSequence中”， “确定”，事件类，事件）
//按钮的颜色
java的（颜色，空， “android.graphics.Color.parseColor”， “串”， “＃00FFFF”）
的javax（NULL，SNK，类， “setActionTextColor”， “INT”，颜色）
使用javax（GET，SNK， “android.support.design.widget.BaseTransientBottomBar”， “getView”）
//我们（获取 “的backgroundColor”， “＃ff3f51b5”）
美国（获得， “背景”， “@ chbar.jpg”）
//可以设置图片背景
//我们（获得 “高度”， “300dp”）
//可以设置高度
java（null，snk，“android.support.design.widget.BaseTransientBottomBar.show”）
javags（ID，NULL， “android.support.design.R $ ID”， “snackbar_text”）
爪哇（文本，得到 “android.view.View.findViewById”， “INT”，ID）
我们（文本， “文本颜色”， “＃0000FF”）
//文本颜色




【图片黑白化】

//sbp("@chbar.jpg",bmp）
tot（1，bmp）

java（宽，bmp，“android.graphics.Bitmap.getWidth”）
java（高，bmp，“android.graphics.Bitmap.getHeight”）

javags（配置，NULL， “android.graphics.Bitmap $配置”， “RGB_565”）
爪哇（图片，空， “android.graphics.Bitmap.createBitmap”， “INT”，宽， “INT”，高 “android.graphics.Bitmap $配置”，配置）
javanew（画板， “android.graphics.Canvas”， “android.graphics.Bitmap”，图片）
javanew（漆 “android.graphics.Paint”）
javanew（厘米， “android.graphics.ColorMatrix”）
的java（NULL，厘米， “android.graphics.ColorMatrix.setSaturation”， “浮动”，0）
javanew（CMCF “android.graphics.ColorMatrixColorFilter”， “android.graphics.ColorMatrix”，厘米）
爪哇（NULL，油漆， “android.graphics.Paint.setColorFilter”， “android.graphics.ColorFilter”，CMCF）
的java（NULL，画板， “android.graphics.Canvas.drawBitmap”， “android.graphics.Bitmap”，BMP， “浮动”，0， “浮动”，0， “android.graphics.Paint”，油漆）


我们（2， “SRC” 图片）




【获取当前软件相关信息】

使用javax（时许，活动， “android.content.ContextWrapper”， “getPackageManager”）

的javax（pknm，活性， “android.content.ContextWrapper”， “getPackageName”）
//本应用包名
syso（pknm）

的javax（版本，PM， “android.content.pm.PackageManager”， “getPackageInfo”， “字符串”，pknm， “INT”，0）
javags（版本，VER “android.content.pm.PackageInfo.versionName”）
//本包名的版本
syso（版本）

的javax（图标，PM， “android.content.pm.PackageManager”， “getApplicationInfo”， “字符串”，pknm， “INT”，0）
的javax（图标，图标， “android.content.pm.PackageItemInfo”， “loadIcon”， “android.content.pm.PackageManager” 时）
//本应用图标
syso（图标）

javags（PKG，VER “android.content.pm.PackageInfo.applicationInfo”）
的javax（应用名称，PKG， “android.content.pm.PackageItemInfo”， “loadLabel”， “android.content.pm.PackageManager” 时）
//本应用名
syso（应用名称）


javags（时间，版本， “android.content.pm.PackageInfo.lastUpdateTime”）
javanew（格式，“java.text.SimpleDateFormat”，“String”，“yyyy年MM月dd日H时mm分s秒”）
javanew（时间，“java.util.Date”，“长”，时间）
java（更新时间，格式，“java.text.DateFormat.format”，“java.util.Date”，时间）
//本应用最后一次更新时间
syso（更新时间）

【强制隐藏输入法】
的java（ACIT，活性， “android.content.ContextWrapper.getApplicationContext”）
的java（窗口，活动， “android.content.Context.getSystemService”， “字符串”， “input_method”）
的java（getact，活性， “android.app.Activity.getCurrentFocus”）
爪哇（赢，getact， “android.view.View.getWindowToken”）
爪哇（空，窗， “android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow”， “android.os.IBinder”，赢了， “诠释”， “0”）

【获取电量信息】
javanew（IntentFilter的， “android.content.IntentFilter”， “字符串”， “android.intent.action.BATTERY_CHANGED”）
的java（电池状态，活动， “android.content.Context.registerReceiver”， “android.content.BroadcastReceiver”，NULL， “android.content.IntentFilter”，IntentFilter的）
// BATTERY_CHANGED是一个粘性广播，所以传空值就能拿到当前状态

的java（状态，电池状态， “android.content.Intent.getIntExtra”， “字符串”， “状态”， “INT”， -  1）
f（状态== 2）{
  TW（ “充电中”）
  } else f（status == 3 || status == 4）{
  TW（ “放电中”）
  } else f（status == 5）{
  总重量（ “已充满”）
  }

的java（插头，电池状态， “android.content.Intent.getIntExtra”， “字符串”， “插入”， “INT”， -  1）
f（插头== 1）{
  TW（ “AC充电中”）
  } else f（plug == 2）{
  TW（ “USB充电中”）
  } else f（plug == 4）{
  TW（ “无线充电中”）
  }

的java（电平，电池状态， “android.content.Intent.getIntExtra”， “字符串”， “水平”， “INT”， -  1）
//当前电池电量
的java（规模，电池状态， “android.content.Intent.getIntExtra”， “字符串”， “比例”， “INT”， -  1）
//最大电池电量
ss（“当前电池电量：”+ level +“
最大电池电量：“+ scale，msg）
TW（MSG）


【文件夹相关操作】

s file =“shixin / iapp”
FDIR（文件，URI）
javanew（文件 “的java.io.File”， “java.lang.String中”，URI）
//创建新的多级文件夹
爪哇（创建多级判断，文件， “java.io.File.mkdirs”）
syso（创建多级判断）

//创建文件夹
爪哇（创建文件夹判断，文件， “java.io.File.mkdir”）
syso（创建文件夹判断）

//判断文件夹是否存在
爪哇（文件夹存在，文件， “java.io.File.isDirectory”）
syso（文件夹存在）

//删除文件夹，只能删除空文件夹
爪哇（删除状态，文件， “java.io.File.delete”）
syso（删除状态）




【自定义UTW弹窗】
cls（“android.app.AlertDialog”，弹窗子类）
s cls =“android.app.AlertDialog $ Builder”
CLS（CLS，弹窗类）
javanew（弹窗对象，弹窗类，“android.content.Context”，活动）
javax（null，弹窗对象，cls，“setMessage”，“CharSequence”，“欢迎加入iapp大本营！”）
// javax（null，弹窗对象，cls，“setCancelable”，“boolean”，false）
//设置是否可以取消
的javax（NULL，弹窗对象，CLS， “的setTitle”， “的CharSequence”， “提示”）
cls（“android.content.DialogInterface $ OnClickListener”，事件类）
javacb（点击事件，事件类）
{
  结束（）
}
javacb（中间事件，事件类）
{
  结束（）
  }
javax（null，弹窗对象，弹窗类，“setNegativeButton”，“CharSequence”，“进入软件”，事件类，中间事件）
javax（null，弹窗对象，弹窗类，“setPositiveButton”，“CharSequence”，“确定”，事件类，点击事件）
使用javax（弹窗对象，弹窗对象，CLS， “创造”）
爪哇（空，弹窗对象， “android.app.Dialog.show”）
//显示
//注意，以下所有代码必须在节目之后调用！否则报错
javags（对话框，弹窗对象， “android.app.AlertDialog”， “mAlert”）
javags（标题，对话框， “com.android.internal.app.AlertController”， “mTitleView”）
//取得标题
我们（标题， “文本颜色”， “＃E91E63”）
javags（消息，对话框， “com.android.internal.app.AlertController”， “mMessageView”）
//取得消息
我们（消息， “文本颜色”， “＃E91E63”）
javax（右边按钮，弹窗对象，弹窗子类，“getButton”，“int”， -  1）
我们（右边按钮，“textcolor”，“＃E91E63”）
//设置按钮颜色
的java（窗口，弹窗对象， “android.app.Dialog.getWindow”）
javags（位置，空， “android.view.Gravity”， “中心”）
/。最佳
中央
底部
对
剩下
./
爪哇（NULL，窗口， “android.view.Window.setGravity”， “INT”，位置）
//设置弹窗位置，不设置默认为CENTER
CLS（ “android.view.WindowManager $的LayoutParams”，cls_lp）
的java（LP，窗口， “android.view.Window.getAttributes”）
ZDP（-1，宽度）
javass（NULL，LP， “android.view.ViewGroup $的LayoutParams”， “宽度”，宽度）
//设置弹窗宽度
ZDP（-1，高度）
javass（NULL，LP， “android.view.ViewGroup $的LayoutParams”， “高度”，高度）
//设置弹窗高度
//弹窗的高度和宽度的单位为像素，可以通过ZDP把DP转换为像素
javass（NULL，LP， “android.view.WindowManager $的LayoutParams”， “Y”，0）
//设置ÿ轴位置
javass（NULL，LP， “android.view.WindowManager $的LayoutParams”， “X”，0）
//设置X轴位置
爪哇（NULL，窗口， “android.view.Window.setAttributes”，cls_lp，LP）
//设置为自定义样式
爪哇（赢，弹窗对象， “android.app.Dialog.getWindow”）
爪哇（DON，赢了， “android.view.Window.getDecorView”）

sa = 0
sb = 40
sc =“＃00000000”
sd =“＃333333”
ngde（a，b，c，d，f）

//背景
我们（DON， “背景”，F）


【设置布局单个或多个圆角】
// iyu调用代码

调用（NULL， “mjava”， “set.setBackground” 活动，6,80,40,80,40， “＃000000”）


//新建一个set.mjava

import android.app。*;
import android.content.res。*;
import android.graphics。*;
import android.os。*;


public static void setBackground（Activity activity，int id，int yja，int yjb，int yjc，int yjd，String color）
{
  尝试
  {
     android.graphics.drawable.GradientDrawable shape = new android.graphics.drawable.GradientDrawable（）;
     shape.setShape（android.graphics.drawable.GradientDrawable.RECTANGLE）;
     shape.setCornerRadii（new float [] {yja，yja，yjb，yjb，yjc，yjc，yjd，yjd}）;
     shape.setColor（Color.parseColor（颜色））;
     shape.setStroke（0，Color.parseColor（“＃ffffff”））;
     activity.findViewById（ID）.setBackgroundDrawable（形状）;
  }
  catch（例外e）
  {
  }
}


【修改浮动按钮颜色】
GVS（4，FAB）
java的（图标颜色，空， “android.graphics.Color.parseColor”， “串”， “＃009688”）
爪哇（背景颜色，空， “android.graphics.Color.parseColor”， “串”， “＃00FF00”）

java（null，fab，“android.widget.ImageView.setColorFilter”，“int”，图标颜色）
的java（背景颜色，NULL， “android.content.res.ColorStateList.valueOf”， “INT”，背景颜色）
java（null，fab，“android.support.design.widget.FloatingActionButton.setBackgroundTintList”，“android.content.res.ColorStateList”，背景颜色）

【获取文件/文件夹创建时间】
FDIR（ “％接入点内部协议/ Userimg”，文件）

javanew（F “的java.io.File”， “java.lang.String中”，文件）
的java（CAL中，f， “java.util.Calendar.getInstance”）
的java（时间，F， “java.io.File.lastModified”）
爪哇（NULL，CAL， “java.util.Calendar.setTimeInMillis”， “长”，时间）
爪哇（TIMS，CAL， “java.util.Calendar.getTime”）
javanew（格式，“java.text.SimpleDateFormat”，“String”，“yyyy年MM月dd日HH时mm分s秒”）
java（时间，格式，“java.text.DateFormat.format”，“java.util.Date”，tims）

syso（时间）

【调整当前屏幕亮度】
的java（窗口，活动， “android.app.Activity.getWindow”）
的java（LP，窗口， “android.view.Window.getAttributes”）
// 0-1之间
javass（NU，LP， “android.view.WindowManager $的LayoutParams”， “screenBrightness” 0.55）
使用javax（NULL，窗口， “android.view.Window”， “setAttributes”， “android.view.WindowManager $的LayoutParams”，LP）

【高斯模糊】
s路径=“％tumblr / 6f319d21-827c-486d-9ecf-11541aaea3c2.jpg”
s半径=“4”
s模糊度=“5”

CLS（ “android.graphics.Bitmap”，图像类）
CLS（ “android.renderscript.RenderScript”，高斯类）
CLS（ “android.renderscript.Element”，指针类）
CLS（ “android.renderscript.ScriptIntrinsicBlur”，模糊类）
CLS（ “android.renderscript.Allocation”，计算类）

sbp(路径,img)
javax(bmpw, img, 图像类,"getWidth")
s(bmpw/半径,bmpw)
javax(bmph, img, 图像类,"getHeight")
s(bmph/半径,bmph)

的javax（IMG，NULL，图像类， “createScaledBitmap”，图像类，IMG “INT”，bmpw， “INT”，BMPH， “布尔”，假）
使用javax（RS，空，高斯类， “创造”， “android.content.Context”，活动）
的javax（EME，空，指针类， “U8_4”，高斯类，RS）
使用javax（SB，空，模糊类， “创造”，高斯类，RS，指针类，EME）

的javax（INP，NULL，计算类， “createFromBitmap”，高斯类，RS，图像类，IMG）
的javax（inpget，INP，计算类 “的getType”）
的javax（OTP，NULL，计算类， “createTyped”，高斯类，RS， “android.renderscript.Type”，inpget）

的javax（NULL，SB，模糊类， “setRadius”， “浮动”，模糊度）
的javax（NULL，SB，模糊类， “setInput设置”，计算类，INP）
的javax（NULL，SB，模糊类 “的forEach”，计算类，OTP）
的javax（NULL，OTP，计算类， “CopyTo从”，图像类，IMG）

使用javax（NULL，RS，高斯类， “消灭”）
爪哇（空，SB， “android.renderscript.BaseObj.destroy”）

//最后输出IMG，可以设置SRC或者BG
us(1,"background",img)

【编辑框错误提示】
gvs(2,编辑框)
java(null,编辑框,"android.widget.TextView.setError","CharSequence","错误提示")

【普通列表快速拖动条】
gvs(12,列表)
java(null,列表,"android.widget.AbsListView.setFastScrollEnabled","boolean","true")
//v7列表不能用
//拖动条默认颜色为白色，在列表大于一定数量才有

【控件透明度】
gvs(1,控件)
//0-1之间
java(null,控件,"android.view.View.setAlpha","float",0.5)

【判断vpn是否开启】
s isVpn = false
java(nis,null,"java.net.NetworkInterface.getNetworkInterfaces")
f(nis != null){
  java(list,null,"java.util.Collections.list","java.util.Enumeration",nis)
  for(ni;list){
    java(up,ni,"java.net.NetworkInterface.isUp")
    java(ia,ni,"java.net.NetworkInterface.getInterfaceAddresses")
    java(size,ia,"java.util.List.size")
    f(up && size != 0){
      java(name,ni,"java.net.NetworkInterface.getName")
      f(name == "tun0" || name == "ppp0"){
        s isVpn = true
        break
        }
      }
    }
  }
f(isVpn==true)
{
  syso("有抓包")
  tw("网络错误")
  end()
  endcode
}
else
{
  syso("没有抓包")
}


【java修改图片颜色】
gvs(8,view)

java(c,null,"android.graphics.Color.parseColor","String","#212121")
javags(mode,null,"android.graphics.PorterDuff$Mode","SRC_ATOP")
java(null,view,"android.widget.ImageView.setColorFilter","int",c,"android.graphics.PorterDuff$Mode",mode)

【获取手机电量】
java(管理器,activity,"android.app.Activity.getSystemService","String","batterymanager")
//初始化
java(a,管理器,"android.os.BatteryManager.getIntProperty","int",4)
//获取剩余电量，加上%就是手机剩余的电量
tw(a)
【v7列表的多种用法】
//竖直列表
gvs(4,对象)
cls("android.support.v7.widget.RecyclerView",列表类)
cls("android.support.v7.widget.LinearLayoutManager",布局管理类)
javanew(布局,布局管理类,"Context",activity,"int",1,"boolean",false)
javax(null,对象,列表类,"setLayoutManager","android.support.v7.widget.RecyclerView$LayoutManager",布局)

//横向列表
gvs(4,对象)
cls("android.support.v7.widget.RecyclerView",列表类)
cls("android.support.v7.widget.LinearLayoutManager",布局管理类)
javanew(布局,布局管理类,"Context",activity,"int",0,"boolean",false)
javax(null,对象,列表类,"setLayoutManager","android.support.v7.widget.RecyclerView$LayoutManager",布局)

//网格列表
gvs(4,对象)
cls("android.support.v7.widget.RecyclerView",列表类)
cls("android.support.v7.widget.GridLayoutManager",布局管理类)
javanew(布局,布局管理类,"Context",activity,"int",3)
javax(null,对象,列表类,"setLayoutManager","android.support.v7.widget.RecyclerView$LayoutManager",布局)

//瀑布流
gvs(4,对象)
cls("android.support.v7.widget.RecyclerView",列表类)
cls("android.support.v7.widget.StaggeredGridLayoutManager",布局管理类)
javanew(布局,布局管理类,"int",2,"int",1)
javax(null,对象,列表类,"setLayoutManager","android.support.v7.widget.RecyclerView$LayoutManager",布局)


【java设置手机壁纸】
//初始化包
cls("android.app.WallpaperManager",wm)
cls("android.graphics.Bitmap",bitp)
cls("android.graphics.BitmapFactory",bfy)

//图片路径(/sdcard/+路径)
s path = "/sdcard/iApp/Userimg/icon_iapp.png"
//初始化壁纸工具
javax(Wallm,null,wm,"getInstance","Context",activity)
//初始化图片为Bitmap变量
javax(image,null,bfy,"decodeFile","String",path)
//设置壁纸
javax(null,Wallm,wm,"setBitmap",bitp,image)

//需要权限<uses-permission android:name="android.permission.SET_WALL_PAPER"/>应该是这个我手写的或者百度安卓设置壁纸权限


【图片圆角】
sbp("图片",bitmap)

java(res,activity,"android.content.Context.getResources")

java(sss.drawable,null,"android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory.*","android.content.res.Resources",res,"android.graphics.Bitmap",bitmap)

java(null,sss.drawable,"android.support.v4.graphics.drawable.RoundedBitmapDrawable.setCornerRadius","float",100)
//圆角度数

us(控件id,"background",sss.drawable)

【状态栏白底黑字】
java(cs, activity, "android.app.Activity.getWindow")
java(cs2, cs, "android.view.Window.getDecorView")
java(null, cs2, "android.view.View.setSystemUiVisibility", "int", "8192")
//设置状态栏透明(沉浸式)
java(null, cs, "android.view.Window.addFlags", "int", "67108864")

【输入法相关】

说明：此代码可以解决输入法弹出的时候遮住你的控件/让布局乱动的问题
//请根据需要，自行修改
s flag = 18
/.
可选值：
0 系统默认，由系统选择显示方式
2 当用户进入时，默认隐藏输入法
4 当用户进入时，默认显示输入法
16 输入法弹出时，调整空白区域来显示输入法。即使调整空白区域，输入法还是有可能遮挡一些有内容区域，这时用户就只有退出输入法才能看到这些被遮挡区域并进行交互。
18 与16相同，但是当用户进入时，默认隐藏输入法
20 与16相同，但是当用户进入时，默认显示输入法
32 输入法弹出时，顶起当前布局（更改布局高度，同时整个布局上移）
34 与32相同，但是当用户进入时，默认隐藏输入法
36 与32相同，但是当用户进入时，默认显示输入法
48 当输入法弹出时，什么也不做，直接让输入法覆盖界面
50 与48相同，但是当用户进入时，默认隐藏输入法
52 与48相同，但是当用户进入时，默认显示输入法
./
java(window,activity,"android.app.Activity.getWindow")
java(null,window,"android.view.Window.setSoftInputMode","int",flag)


【控件转图片】
gvs(1,控件)

java(宽,控件,"android.view.View.getWidth")
java(高,控件,"android.view.View.getHeight")
//这里我动态获取控件高度，你们可以自己填进去
/.
这里有几个问题
1.在载入事件不能获取，返回0
2.如果是滚动控件，列表控件等等可以滚动的控件，
获取的高度/不是真实高度宽度，最大只能获取到手机屏的宽高
造成转出来的图片只是已经显示出来的部分
可以用自己手动填入宽高来解决
./

javags(config,null,"android.graphics.Bitmap$Config","ARGB_4444")
//可选值ARGB_8888，ARGB_4444，RGB_565，ALPHA_8
//ARGB_8888画质最好，这里用ARGB_4444是为了节约内存

java(图片,null,"android.graphics.Bitmap.createBitmap","int",宽,"int",高,"android.graphics.Bitmap$Config",config)
f(图片 == null){
  tw("似乎出现问题了")
  endcode
  }
javanew(画板,"android.graphics.Canvas","android.graphics.Bitmap",图片)

java(null,控件,"android.view.View.draw","android.graphics.Canvas",画板)

us(6,"src",图片)

【禁止截图】
java(a,activity,"android.app.Activity.getWindow")
java(null,a,"android.view.Window.addFlags","int",8192)

【拉起iApp导入源码】
fdir("@a.iApp",位置)
//源码位置
javanew(位置,"java.io.File","String",位置)
java(uri,null,"android.net.Uri.fromFile","java.io.File",位置)
sit(a,"data",uri)
sit(a,"flags",268435456)
sit(a,"classname","com.iapp.app","com.iapp.app.logoActivity2")
sit(a, "action", "android.intent.action.VIEW")
java(null,activity,"Context.startActivity","android.content.Intent",a)
java(null,null,"android.content.Intent.createChooser","android.content.Intent",a,"String","iApp")

【MD风格提示】
//iyu调用代码
fn md.tw("MD提示！")

//新建一个md.myu
//mdtw
fn tw(show)
nvw(o,o,"线性布局","",obj)
nvw(o,obj,"线性布局","background=#323232",d)
swh("pxw",w)
us(d,"width",w)
nvw(o,d,"文本","linespacingextra=8\nlayout_margintop=14dp\nlayout_marginright=24dp\nlayout_marginbottom=10dp\nlayout_marginleft=24dp\ntextsize=14sp\ntextcolor=#ffffff",b)
us(b,"text",show)
call(toast,"mlua","lua.Toasts",obj)
end fn

//新建一个lua.mlua
function Toasts(cv)
--自定义tw
import "android.widget.*"
import "android.view.Gravity"
to=Toast(activity)
to:setGravity(Gravity.BOTTOM,0,0);
to:setView(cv)
to:show()
end


【mjava获取网络图片】
//iyu调用代码
t()
{
  //参数:图片URL直链
  s picurl="http://img6.bdstatic.com/img/image/public/20180814.jpg"
  call(back,"mjava","Http.getInternetPicture",picurl)
  ufnsui()
  {
    //背景可以设置哦
    us(1,"background",back)
  }
}

//新建一个Http.mjava

import android.app.*;
import android.content.*;
import android.graphics.*;
import android.net.*;
import java.io.*;
import java.net.*;
import android.graphics.drawable.*;

//获取网络图片
	public static BitmapDrawable getInternetPicture(String UrlPath) {  
        Bitmap bm = null;  
        String urlpath = UrlPath;  
        try {  
            URL uri = new URL(urlpath);  
            HttpURLConnection connection = (HttpURLConnection) uri.openConnection();
            connection.setRequestMethod("GET");  
            connection.setReadTimeout(5000);  
            connection.setConnectTimeout(5000);  
            connection.connect();  
			if (connection.getResponseCode() == 200) {  
                InputStream is = connection.getInputStream();  
                bm = BitmapFactory.decodeStream(is);  
            } else {
                bm = null;  
            }  
        } catch (MalformedURLException e) {  
            e.printStackTrace();  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
        return new BitmapDrawable(bm);  

    }
    

【java获取手机壁纸】
cls("android.app.WallpaperManager",class)
javax(wm,null,class,"getInstance","Context",activity)
javax(drawable,wm,class,"getDrawable")
us(5,"src",drawable)
【隐藏浏览器放大缩小按钮】
gvs(浏览器控件ID,wv)
java(ws,wv,"android.webkit.WebView.getSettings")
java(null,ws,"android.webkit.WebSettings.setBuiltInZoomControls","boolean",true)
java(null,ws,"android.webkit.WebSettings.setDisplayZoomControls","boolean",false)

【mjava调用图库】
//iyu
调用:
javags(agc,"android.content.Intent","android.content.Intent.ACTION_GET_CONTENT")
javanew(it,"android.content.Intent","String",agc)
java(c,it,"android.content.Intent.setType","String","image/*")
javags(ca,"android.content.Intent","android.content.Intent.CATEGORY_OPENABLE")
java(c,it,"android.content.Intent.addCategory","String",ca)
java(c,activity,"android.app.Activity.startActivityForResult","android.content.Intent",it,"int",2)

回调:
javags(er,activity,"android.app.Activity","RESULT_OK")
f(st_lC==er)
{
  f(st_sC==2)
  {
    java(uri,st_iT,"android.content.Intent.getData")
    call(path, "mjava", "uri.getRealPath", activity, uri)
    syso(path)
    us(2, "src", path)
    us(3, "text", path)
    //path为图片路径
  }
}





uri.mjava
//新建一个名为uri的mjava文件
import android.content.ContentUris;
import android.content.Intent;
import android.net.Uri;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.database.Cursor;
import android.content.Context;

public static String getRealPath(Context context, Uri uri)
{
  String imagePath = null;
  if(DocumentsContract.isDocumentUri(context, uri))
  {
    // 如果是document类型的Uri，则通过document id处理
            
    String docId = DocumentsContract.getDocumentId(uri);
           
    if ("com.android.providers.media.documents".equals(uri.getAuthority()))
            
    {
                
      String id = docId.split(":")[1];           
      String selection = MediaStore.Images.Media._ID + "=" + id;
  
      imagePath = getImagePath(context, MediaStore.Images.Media.EXTERNAL_CONTENT_URI, selection);
    }
            
    else if ("com.android.providers.downloads.documents".equals(uri.getAuthority()))
            
    {
                
      Uri contentUri = ContentUris.withAppendedId(Uri.parse("content://downloads/public_downloads"), Long.valueOf(docId));
      imagePath = getImagePath(context, contentUri, null);
    }
  }
  else if("content".equalsIgnoreCase(uri.getScheme()))
  {
    // content类型普通方式处理
    imagePath = getImagePath(context, uri, null);
  }
  else if("file".equalsIgnoreCase(uri.getScheme()))
  {
    // file类型直接获取图片路径
    imagePath = uri.getPath();
  }
  return imagePath;
}

public String getImagePath(Context context, Uri uri, String selection)
{
  String path = null;
  // 通过Uri和selection来获取真实的图片路径
  Cursor cursor = context.getContentResolver().query(uri, null, selection, null, null);
  if (cursor != null)
  {
    syso(cursor.moveToFirst());
    if (cursor.moveToFirst())
    {
      path = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));
    }
    cursor.close();
  }
  return path;
}


【WebView网页放大缩小】
放大:
gvs(1,ss.wv)
java(c,ss.wv,"android.webkit.WebView.zoomIn")

缩小:
gvs(1,ss.wv)
java(c,ss.wv,"android.webkit.WebView.zoomOut")

【设置控件阴影】
gvs(2, 标题栏)
//2为控件
zdp(4, 标题栏阴影)
//4为阴影厚度
java(null,标题栏,"android.view.View.setElevation", "float",标题栏阴影)
【java获取视频任意一帧】
fdir("%a.mp4",路径)
javanew(mmr,"android.media.MediaMetadataRetriever")
java(null,mmr,"android.media.MediaMetadataRetriever.setDataSource","String",路径)
java(图片,mmr,"android.media.MediaMetadataRetriever.getFrameAtTime","long",0)
//%a.mp4为视频路径，最后的图片使用us就可以设置到src或者backound，最后的0换第0帧，可改变，但不得超过视频总帧数

【Toolbar设置返回键】
s id=3
//toolbar的id

utb(id)
java(mTba, activity, "android.support.v7.app.AppCompatActivity.getSupportActionBar")
java(null, mTba, "android.support.v7.app.ToolbarActionBar.setDisplayHomeAsUpEnabled", "boolean", true)
//设置左边为返回键

utb("set", "leftck", id)
{
  tw("返回")
}

【Toolbar标题栏图标颜色】
s id=3
//toolbar的id

utb(id)

gvs(id, mTba)

javags(mMode, null, "android.graphics.PorterDuff$Mode", "SRC_ATOP")

java(颜色,null,"android.graphics.Color.parseColor","String","#ffffff")
//颜色

java(mTbaBackSrc, mTba, "android.support.v7.widget.Toolbar.getNavigationIcon")
java(null, mTbaBackSrc, "android.graphics.drawable.Drawable.setColorFilter", "int", 颜色, "android.graphics.PorterDuff$Mode", mMode)

java(mTbaMenuSrc, mTba, "android.support.v7.widget.Toolbar.getOverflowIcon")
java(null, mTbaMenuSrc, "android.graphics.drawable.Drawable.setColorFilter", "int", 颜色, "android.graphics.PorterDuff$Mode", mMode)
