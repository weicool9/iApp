
【指定系统编译】

[方案一]

// 在裕语言V5中可以指定系统来编译代码

//执行 java 多行代码
java
{
  String str = "这是 iApp";
  android.util.Log.v("iapp", str);

}

//执行 java 单行代码
java android.util.Log.v("iapp", "这是 iApp");


[方案二]

// 裕语言V5 允许java 格式文件，进行混编交互。

// 创建 *.java 文件 并且完全支持 android 原生开发。


【目录开头符号标识】

// 代码中需要输入一个文件的代码，填写路径的开头第一个可以使用符号进行快捷指向路径

// 路径开头为 % 硬盘分区根路径

// 路径开头为 @ 包内资源路径

// 路径开头为 $ 应用安装位置路径


【裕语言v5 里的根对象】

用法：

//这是裕语言V5里的根对象，也是所有子对象的父对象，裕语言V5 所有代码的源头命名。
iapp


//------- 根对象的 子对象

// 字符管理对象
iapp.zf

// 数据管理对象
iapp.sj

// 视图管理对象
iapp.st

// 文件管理对象
iapp.wj

// 工具管理对象
iapp.gj

// 网络管理对象
iapp.wl

// 系统管理对象
iapp.xt

//前缀 iapp 是根对象的，也可以直接写它的子对象

如：
// 工具对象 里的 输出方法
gj.sc("输出文字")


//------- 根对象的 方法

// 为了更简便的使用常用方法，根对象提供以下方法：

// 输出
iapp.gj.sc(123) 可直接使用 gj.sc(123)

【资源管理对象】
// 资源管理对象，与代码根对象不同，主要的作用是获取项目内相关资源的ID
// 资源管理对象的 根对象
zy 或 iapp.zy


// 获取 strings.xml 内的名称为 a 字符串
s a = zf.zf(zy.z.a)

// 获取 drawable 内的文件名为 b.xml 的文件，常用于背景的绘制
s b = sj.hz(zy.h.b)

// 获取 mipmap 内的文件名为 c.png 的图像资源ID（一个整数），可将ID设置给图像控件、图像按钮控件等
s c = zy.t.c

// 获取控件的ID
s d = zy.id.wb1
//或
//s d = zy.i.wb1


【类模块对象的创建】

// myu 类模块需要先创建对象
cj 或  iapp.cj

// 创建 abc.myu 类模块的对象，同时会调用 abc.myu 类模块的构造 ff lei()
s abc = cj.abc()

// 调用类模块的变量
s b = abc.b

// 调用类模块的方法
s c = abc.c()


【修饰符】

// 全局；在变量或 方法前加上后可使用 文件名.方法或变量名 进行访问。
qj

// 私有；在变量或 方法前加上后，方法或变量名仅供当前文件访问。
sy

// 固定；申明 变量 并赋值后，其值不可改变。其变量可在方法内任意代码块里调用，如下
gd

// gd 例1
ff a()
{

gd s abc = "abc"

// 创建线程
gj.xc(){

gj.sc(abc)

}

}


【s 数据类型】

用法：

// 推断类型

//说明：根据首次赋值的数据来推断变量类型。推断类型 无法作为方法的申明参数变量使用。


// 字符串型（String）
s d = "nihao"
string d2 = "nihao"


// 整数型（int）
s e = 123
int e2 = 123


// 小数型（double）
s f = 123.123
double f2 = 123.123


// 是否型（boolean）
s g = shi
boolean g2 = fou
//可以这写
//s g = true
//boolean g2 = false


// 数据型（Object）
s h = kong
object h = null

//可以这写，不赋值。注意：变量默认值不为 kong 
//s h
//object h


// 方法参数变量需要指向性数据类型

方法，例：

ff jyg(s bl = 0)
{
fh bl + 1
}

// 全局变量：需要写在类模块里，并且不能写在方法内，应该写在方法外；

// 1. 在 类模块 里申明的变量；可以在该类中的所有方法 或 事件方法 内使用；
s abc = 1

// 增加全局修饰符
qj s abc2 = 2

【myu 类模块】
// 创建一个 abc.myu 源码文件，内容如下：

// 创建 模块变量 a并赋值
s a = "NiHao"
s aa
qj s aaa = "全局变量"

// 构造方法
ff lei(s a)
{
aa = a
}

// 创建方法 b
ff s b()
{
  fh a
}

// 创建方法 c
ff s c(s d)
{
  fh a + d + aa
}

// ----- 调用实例 -----

// 新建对象
s abc = xj.abc("hahaha")

// 输出 模块变量 a
gj.sc(abc.a)

// 输出 模块方法 b
gj.sc(abc.b())

// 输出 模块方法 c
gj.sc(abc.c("Ma?"))


【ff 方法】

// 以 ff 开头 + [可选：修饰符] + [可选：方法返回类型] + 方法名 ( 参数 [可选：强制参数类型] )
ff abc()
{
  gj.sc("这是 无返回数据，无参数 的方法")
}


// fh 为 返回数据的代码

// 返回如设置 s 将等同于Object类型
ff s abc(s a)
{
  gj.sc("这是 返回数据a + 123，参数变量a将等同于Object类型 的方法")
  fh a + 123
}

// 返回如设置 int 为整数类型
ff int abc(s a = 0)
{
  gj.sc("这是 返回数据a + 123，参数变量a预设值为整数0将 s 类型强制转换为 int 的方法")
  fh a + 123
}


// 修饰符 qj 为全局方法，其他界面 与 模块 里可以调用
// 返回如设置 int 为整数类型
qj ff int abc(int a)
{
  gj.sc("这是 返回数据a + 123，参数变量a类型为 int 的方法")
  fh a + 123
}


【// 或 /* */ 注释】

用法：

//单行注释

/*
这是多行注释
*/


【gj.sc 输出】
用法：

// 可以输出数据
gj.sc("1314")

【rg 如果判断】
用法：

s a = 2
rg a == 1
{
	gj.sc("等于1")
}
,a == 2
{
	gj.sc("等于2")
}
,
{
	gj.sc("等于其他")
}

支持运算符（返回 是 与 否）：
== 是否对等
!= 是否不等于
>= 是否大于或等于
<= 是否小于或等于
> 是否大于
< 是否小于
?* 字符串开通是否相同
*? 字符串结尾是否相同
? 字符串是否被包含
上面三个举例：
s a = "abcdef"
rg a ?* "abc" 返回“是”
rg a *? "def" 返回“是”
rg a ? "cde" 返回“是”

支持逻辑运算符：
|| 或者
&& 并且


【xh 循环】
用法：
//这将循环99次
s a = 99
// 单个表达式循环
xh a > 0
{
gj.sc(a)
a -= 1
}

// 循环扩展2
s sz = { "a", "b", "c", "d" }
// 2个表达式的循环
xh s i, sz
{
gj.sc(i)
}


// 循环扩展3
s a = 9
// 3个表达式的循环
xh s i=0, i<a, i++
{
gj.sc(i)
}

// tcxh 将直接跳出循环
s a = 9
// 3个表达式的循环
xh s i=0, i<a, i++
{
  rg i>3{
    tcxh
  }
gj.sc(i)
}

// tcbcxh 将直接跳出当前循环，并继续执行后面的循环
s a = 9
// 3个表达式的循环
xh s i=0, i<a, i++
{
  rg i>3{
    tcbcxh
  }
gj.sc(i)
}

说明：
条件循环语句，比较值的变化，然后进行循环执行 { 代码 } 里面的代码。当条件为“否”的时候会停止循环，条件“是”的话，将一直循环执行。
支持运算符（返回 是 与 否）：（跟 rg 语句 一样，请参考）

【yc 异常】

// 无异常日志
yc{
gj.sc("执行正常代码")

},{

gj.sc("如果发生异常，将被执行")

}

// 有异常日志
yc{
gj.sc("被执行代码")

},(e){

gj.sc("如果被执行代码发生异常，将被执行；异常日志:" + e)

}

说明：
常用于可能发生异常代码的执行，其中的代码如果发生了异常不会造成应用崩溃。

【st.*() 获取视图控件】
用法：

//如，获取文本控件对象
// 输入控件的ID
s wb = st.wb(zy.id.wb1)
gj.sc(wb)


s wb2 = st.wb(zy.id.wb2)
// 获取控件的原对象 返回 TextView类型
gj.sc(wb2.st)

// 获取文本控件的文本字符
gj.sc(wb2.zf())


// 设置文本控件的文本字符
wb2.zf("ni hao ma?")

// 其他所有控件获取方法是一样的，获取的对象 子方法可能有差别。

// 获取线性布局对象
// 输入控件的ID
s xxbj = st.xxbj(zy.id.xxbj1)
gj.sc(xxbj)


// 目前大部分的视图对象的 子方法 和 相关的动态设置事件 都还未开放；


【gj.xc 新线程】
用法：
gj.xc()
{
	gj.sc("新线程里执行代码")
}

说明：
启用新线程，去执行一些需要执行很久的代码。比如把下载文件，获取网页源码，大量的文件操作，可以放入新线里执行。这里线程的概念，启用新的线程帮你处理代码，这样不会影响到主线程。


【st.sj 事件重置】


【gj.ts 提示】
用法：

// 该方法需要手机开放应用的通知权限

// 第一个参数为 需要被提示的内容
gj.ts("你好")

// 或 第二个参数为显示时长 1代表正常，2代表短暂
gj.ts("你好", 1)


【wj.cz 文件是否存在】
用法：
// 文件是否存在
s a = "%abc.zip"
s b = wj.cz(a)

// 文件夹是否存在
s a = "%abc"
s b = wj.cz(a)

//返回 true 或 false
gj.sc(b)

【wj.sc 删除文件】
用法：
// 删除文件
s a = "%abc.zip"
s b = wj.sc(a)

// 文件夹删除，并删除子文件夹
s a = "%abc"
s b = wj.sc(a, true)

//返回 删除文件的数量
gj.sc(b)

【wj.dx 文件大小】
用法：
s a = "%abc.zip"
s b = wj.dx(a)

//返回 文件 或 文件夹 的大小
gj.sc(b)

【wj.dqwb 读取文本】
用法：(将读取SD卡根目录的abc.txt文件里面的内容)
s a = "%abc.txt"
s c = wj.dqwb(a)

s a = "%abc.txt"
s b = "utf-8"
s c = wj.dqwb(a, b)

//返回 文本文件 的内容
gj.sc(b)

【wj.xrwb 写入文本】
用法：(将文本数据写入至SD卡根目录的abc.txt文件里面)
s a = "%abc.txt"
s b = "我是一个txt文件的内容"
s d = wj.xrwb(a, b)

s a = "%abc.txt"
s b = "我是一个txt文件的内容"
s c = "utf-8"
s d = wj.xrwb(a, b, c)

//返回 true 或 false
gj.sc(d)


【wj.fz 复制文件】
用法：
s a = "%abc.txt"
s b = "%abc2.txt"
s d = wj.fz(a, b)

//设置重复不覆盖
s c = false
s d = wj.fz(a, b, c)

//返回 true 或 false
gj.sc(d)


【wj.lb 文件夹与文件列表】
用法：

// 注意 lb l是字母L的小写， 为拼音首字母 lb=列表

s a = "%dir"

//获取文件夹与文件列表
s b = wj.lb(a)
// 循环数组
xh s c, b
{
  gj.sc(c)
}

//仅获取文件夹列表
s a = "%dir"
s b = wj.lb(a, true)
// 循环数组
xh s c, b
{
  gj.sc(c)
}

//仅获取文件列表
s a = "%dir"
s b = wj.lb(a, true)
// 循环数组
xh s c, b
{
  gj.sc(c)
}

【wj.zy 转移文件】
用法：
s a = "%abc.txt"
s b = "%abc2.txt"
s d = wj.zy(a, b)

//设置重复不覆盖
s c = false
s d = wj.zy(a, b, c)

//返回 true 或 false
gj.sc(d)


【wj.hqml 获取目录路径】
用法：

s a = "%dir"
s d = wj.hqml(a)

//返回 绝对路径
gj.sc(d)

【wj.jy 解压zip文件】
用法：

// 目标ZIP
s a = "%a.zip"
// 只解压部分文件
s b = "%b.txt"
// 解压到指定目录
s c = "%dir"
// 重复是否覆盖
s d = true

// 解压指定部分文件文件，并指定重复覆盖
s e = wj.jy(a, b, c, d)

//返回 解压文件数量
gj.sc(e)

// 解压文件，并指定重复覆盖
s e = wj.jy(a, c, d)
//返回 解压文件数量
gj.sc(e)

// 解压文件，重复不覆盖
s e = wj.jy(a, c)
//返回 解压文件数量
gj.sc(e)


【wj.ys 压缩zip文件】
用法：

// 目标文件夹路径
s a = "%dir"

// 压缩到ZIP的路径
s b = "%a.zip"

// 解压文件，重复不覆盖
s d = wj.ys(a, b)

//返回 压缩的文件数量
gj.sc(d)


【wj.dk 打开文件】
用法：
s a = "%abc.apk"
wj.dk(a)

//无返回


【zf.th 替换字符】
用法：

s a = "123456789"
s b = "2"
s c = "0"
s d = zf.th(a, b, c)

//返回 替换后的字符
gj.sc(d)

//支持正则表达式
s d = zf.th(a, b, c, true)

【zf.qc 取出字符】
用法：

s a = "123456789"
s b = "23"
s c = "78"
s d = zf.qc(a, b, c)

//返回 取出后的字符
gj.sc(d)

s b = 2
s c = 6
s d = zf.qc(a, b, c)

//返回 取出后的字符
gj.sc(d)


【zf.fg 分割字符】
用法：

s a = "12,34,56,789"
s b = ","
s d = zf.fg(a, b)

// 循环数组
xh s e, d
{
  gj.sc(e)
}

// 支持正则表达式
s d2 = zf.fg(a, b, true)

【zf.cx 从头查询字符位置】
用法：

s a = "123456789"
s b = "56"
s d = zf.cx(a, b)

//返回 查询的字符位置
gj.sc(d)

s c = 2
s d = zf.cx(a, b, c)

//返回 查询的字符位置
gj.sc(d)


【zf.dcx 从尾倒查询字符位置】
用法：

s a = "123456789"
s b = "56"
s d = zf.dcx(a, b)

//返回 查询的字符位置
gj.sc(d)

s c = 2
s d = zf.dcx(a, b, c)

//返回 查询的字符位置
gj.sc(d)


【zf.cd 获取字符长度】
用法：

s a = "123456789"
s d = zf.cd(a)

//返回 字符的长度
gj.sc(d)

【zf.qctwkg 去除头尾空格】
用法：

s a = "  123456789 "
s d = zf.qctwkg(a)

//返回 字符的将去除头尾空格
gj.sc(d)


【zf.zhxx 转换为小写】
用法：

s a = "aBcDefGh"
s d = zf.zhxx(a)

//返回 字符的将转换为小写
gj.sc(d)


【zf.zhdx 转换为大写】
用法：

s a = "aBcDefGh"
s d = zf.zhdx(a)

//返回 字符的将转换为大写
gj.sc(d)


【zf.sjs 生产范围随机数】
用法：

s a = 1000
s b = 9999
s d = zf.sjs(a, b)

gj.sc(d)


【gj.zt 暂停代码】
// 创建线程
gj.xc(){

// gj.zt(以毫秒为单位，1秒=1000毫秒)
gj.zt(1000)
gj.sc("1秒后")

gj.zt(3000)
gj.sc("3秒后")

}

【数组】
用法：
s sz = { "a", "b", "c", "d" }
s sz2 = { 1, 2, 3, 4 }

// 循环数组
xh s e, sz
{
  gj.sc(e)
}

// 访问指定维度
s a = sz[0]
gj.sc(a)

// 获取数据长度
s d = sz.length
gj.sc(d)


【wl.hq 获取网页源码】
用法：

// 需要注意的是 wl.hq 需要放入线程中执行；

// 创建线程
gj.xc(){

// 网址
s a = "https://m.baidu.com"

// post提交的数据，对应name1=value1&name2=value2，这个参数可以设置 null 则为 get方式
s b = { "name1", "value1", "name2", "value2" }

// 编码
s c = "utf-8"

// 传递cookie项值，格式为nama=value 下例： uid=112;name=nihao;sb=123456789;
s d = "uid=112;name=nihao;sb=123456789;"

// 带自动设置cookie方式获取网页，并记录当前网页的Cookie
s e = true

// 设置Header头:（可设置多条，以“||”隔开）文件头包括了Cookie，User-Agent设备型号
s f = "User-Agent=Mozilla/5.0 (iPad; U; CPU OS 6_0 like Mac OS X; zh-CN; iPad2)||accept=*/*||accept-language=zh-CN"

// get方式：网址，编码
s st2 = wl.hq(a, c)

// post方式：网址，数据，编码
s st3 = wl.hq(a, b, c)

// post方式：网址，数据，编码，传递cookie
s st4 = wl.hq(a, b, c, d)

// post方式：网址，数据，编码，传递cookie, 是否自动设置cookie，设置Header头
s st5 = wl.hq(a, b, c, d, e, f)

// post方式：网址，数据，编码，传递cookie, 是否自动设置cookie，设置Header头，设置连接超时，设置接收超时，设置代理IP
s st5 = wl.hq(a, b, c, d, e, f, 20000, 20000, "10.0.0.172:80")

//返回 网页源码
gj.sc(st2)

}


【wl.xz 下载文件】
用法：

// 创建线程
gj.xc(){

s a = "https://m.baidu.com/static/index/plus/plus_logo.png"
s b = "%plus_logo.png"
s d = wl.xz(a, b)

//返回 下载状态码，0为下载成功，1为下载已重复，-1为下载失败
gj.sc(d)

}

【wl.fw 访问网页】



【gj.tz 跳转界面】
用法：
// 跳转 abc 界面
gj.tz("abc")


//或 根据包名+类名 跳转 com.iapp.abc 界面，访问 com.iapp 包的 abc 界面
gj.tz("com.iapp.abc")


// 跳转 abc 界面，并携带数据，数据为2个数组；要求相互对应 name : value 数据是对应的，包括长度也需要一样（如它们同样都是3个）；
s name = { "name1", "name2", "name3" }
s value = { "value1", "value2", "value3" }
gj.tz("abc", name, value)


Bundle bundle = 自定义一个 Bundle
gj.tz("abc", bundle)


【sj.hqtz 获取跳转的数据】
用法：
// 当跳转界面后，可以再跳转后的界面进行获取相关数据

// 根据 name 来获取它的值
s name1 = sj.hqtz("name1")
gj.sc(name1)


// 直接获取 Bundle
s bundle = sj.hqtz()
gj.sc(bundle)


【gj.tc 弹窗界面】


【gj.gb 关闭界面】
用法：

// 关闭当前界面
gj.gb()


【gj.bfyp 播放音频】



【获取屏幕相关分辨率】

用法：

//获取屏幕宽度
s k = xt.pm().k
//获取屏幕高度
s g = xt.pm().g

//获取顶部状态栏高度
s ztl = xt.pm().ztl

//获取底部虚拟按键高度
s xnaj = xt.pm().xnaj


【xt.sj 获取时间】

【xt.xszm 显示桌面】

【xt.ztl 状态栏操作】

【xt.hsp 横竖屏操作】

【gj.bfsp 播放视频】

【gj.jszx 结束执行】

【更多代码正在测试中，会逐步开放！】